INTERNET-DRAFT                                              Jens Sabitzer
Intended status: Standards Track                           September 7, 2025
Expires: March 8, 2026

        Standard API Password Interface (SAPI) for Password Changes
                    draft-sabitzer-sapi-password-02

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF). Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 11, 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors. All rights reserved.

   This document is subject to BCP 78 and the IETF Trust’s Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document. Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document. Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Abstract

   This document specifies the Standard API Password Interface (SAPI),
   a set of interoperable HTTP endpoints for changing and resetting
   user passwords. SAPI enables consistency across services, vendors,
   and government systems, including support for automated changes by
   password managers and for self-service resets using out-of-band
   verification channels (e.g., email, SMS, postal mail, in-person).
   The specification defines discovery, policy reporting (including
   per-channel instructions URLs for slow OOB paths), change and reset
   flows, error semantics, security requirements, and extensibility.

Table of Contents

   1.  Introduction
     1.1.  Terminology and Conventions
     1.2.  Audience and Scope
     1.3.  Use Cases
   2.  Overview
     2.1.  Discovery
     2.2.  Authentication
     2.3.  Versioning
   3.  Data Models
     3.1.  Policy Document
     3.2.  Error Model
     3.3.  Channel Identifiers and Locale
   4.  Endpoints
     4.1.  GET /sapi-password/v1/compliance
     4.2.  POST /sapi-password/v1/change
     4.3.  POST /sapi-password/v1/out-of-band-initiate
     4.4.  GET  /sapi-password/v1/out-of-band-status
     4.5.  POST /sapi-password/v1/out-of-band-complete
   5.  Flows (Non-Normative Examples)
     5.1.  Logged-In Password Change
     5.2.  Out-of-Band Reset (Email/SMS)
     5.3.  Out-of-Band Reset (Postal/Manual Approval)
   6.  Security Considerations
   7.  Privacy Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   10. Acknowledgments
   11. Author’s Address

1.  Introduction

   Password changes and resets are implemented inconsistently across
   services. This hinders automation by password managers and increases
   operational risk and user burden. SAPI defines a consistent, secure
   interface for:
   * End-user password changes (current password known).
   * Self-service password resets using out-of-band (OOB) verification
     when the current password is not available, including slow or
     manual channels (postal, in-person/admin).
   * Optional administrative initiation and approval (policy-dependent).

1.1.  Terminology and Conventions

   The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
   “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and
   “OPTIONAL” in this document are to be interpreted as described in
   BCP 14 (RFC 2119 and RFC 8174) when, and only when, they appear in
   all capitals.

   Out-of-band (OOB): verification using a channel different from the
   primary session/API (e.g., email, phone/SMS, postal mail, in-person).

1.2.  Audience and Scope

   SAPI is intended for vendors, identity providers, enterprise systems,
   and government agencies that operate user accounts. It is also
   intended to be consumable by password managers and accessibility
   clients that assist users in maintaining account security.

   SAPI standardizes *how* to expose change/reset functions. It does not
   mandate *which* identity proofing method is used for OOB verification.

1.3.  Use Cases

   (U1) Logged-in change: user supplies current_password and a new_password.

   (U2) Forgotten password reset: user cannot authenticate; the server
        verifies identity via OOB and then permits setting a new password.

   (U3) Optional admin/helpdesk initiation: a trusted operator initiates
        OOB verification per policy (e.g., high assurance, government).

2.  Overview

2.1.  Discovery

   Services MAY expose a discovery document at the well-known path:
     /.well-known/sapi-password
   returning a JSON object with at least:
     - "api_base": base URL (e.g., "https://example.com/sapi-password/v1")
     - "supported_channels": array (e.g., ["email","sms","postal"])
     - "policy_endpoint": absolute or relative path to /compliance
     - "channel_instructions": object mapping channel→HTTPS URL (see 3.1)
   If discovery is not implemented, clients SHOULD assume the default
   base path “/sapi-password/v1/”.

2.2.  Authentication

   Endpoints MUST require authenticated requests except where noted.
   Implementations SHOULD support OAuth 2.0 bearer tokens with a scope
   authorizing password changes/resets. Implementations MAY additionally
   accept HTTP Basic authentication for /change (using current credentials)
   to enable compatibility with clients that cannot perform OAuth.
   Administrative initiation, if offered, MUST require elevated scopes.

2.3.  Versioning

   The first version is “v1”. Servers MAY later offer “v2”, etc. Clients
   MUST NOT assume backwards compatibility across major versions.

3.  Data Models

3.1.  Policy Document (returned by /compliance)

   For any out-of-band channel other than "email" or "sms", servers
   **MUST** provide a stable **HTTPS** URL with human-readable
   instructions for the end user (e.g., postal mail or in-person/admin
   verification steps). This URL **MUST** be advertised via the
   `channel_instructions` map. Instructions SHOULD include expected
   timelines, required documents or approvals, and escalation contacts.

   Example:

   {
     "compliance": true,
     "min_length": 8,
     "max_length": 128,
     "complexity_requirements": {
       "uppercase": true,
       "lowercase": true,
       "numbers": true,
       "special_characters": true
     },
     "min_uppercase": 1,
     "min_lowercase": 1,
     "min_numbers": 1,
     "min_special": 1,
     "allowed_special_characters": "!@#$%^&*",

     "supported_channels": ["email","sms","postal","admin"],

     "channel_instructions": {
       "postal": "https://id.example.gov/help/postal-reset",
       "admin":  "https://id.example.gov/help/in-person-approval"
     },

     "channel_timelines": {
       "email":  "Typically minutes",
       "sms":    "Typically minutes",
       "postal": "Typically 5–10 business days",
       "admin":  "Varies; schedule with HR/IT"
     },

     "channel_notes": {
       "postal": "Government ID required; code mailed to address on file.",
       "admin":  "Bring photo ID; approval recorded in audit log."
     },

     "password_rotation_days": 90,

     "rate_limits": {
       "change_attempt_cooldown_seconds": 60,
       "oob_code_max_attempts": 3,
       "oob_process_max_attempts": 10
     }
   }

   Fields MAY include additional policy items. Clients and servers SHOULD
   ignore unknown fields.

3.2.  Error Model

   Errors SHOULD use HTTP status codes and include a JSON body:

   {
     "error": "SECURITY_REQUIREMENT.NOT_STRONG_ENOUGH",
     "error_description": "Password complexity requirements not met",
     "detail": { "min_length": 12, "min_uppercase": 1 }
   }

   RECOMMENDED error codes include:
     - AUTH.UNAUTHORIZED
     - INPUT.MALFORMED
     - INPUT.MISSING_PARAMETER
     - SECURITY_REQUIREMENT.NOT_STRONG_ENOUGH
     - SECURITY_REQUIREMENT.PASSWORD_REUSED
     - SECURITY_REQUIREMENT.POLICY_VIOLATION
     - OOB.UNKNOWN_ID
     - OOB.PENDING
     - OOB.REJECTED
     - OOB.ADDITIONAL_CONFIRMATION_REQUIRED
     - RATE_LIMIT.EXCEEDED
     - SERVER.ERROR

3.3.  Channel Identifiers and Locale

   Channel identifiers are case-insensitive strings, e.g., "email",
   "sms", "postal", "admin". Requests MAY carry a "channel" to indicate
   the desired OOB method when multiple are available. Clients MAY set
   a locale via the HTTP Accept-Language header or an optional JSON
   field "locale" (e.g., "de-DE"). Servers SHOULD honor locale if
   feasible for user-facing communications.

4.  Endpoints

   All endpoints are under the base path “/sapi-password/v1”. All
   requests MUST be sent over HTTPS. Requests over plaintext MUST be
   rejected (see Security Considerations).

4.1.  GET /sapi-password/v1/compliance

   Purpose: Advertise support and password policy.

   Authentication: REQUIRED.

   Responses:
     200 OK with Policy Document (Section 3.1).
     404 Not Found if SAPI is unsupported.
     401 Unauthorized if auth fails.

4.2.  POST /sapi-password/v1/change

   Purpose: Change a password when current credentials are available.

   Authentication: REQUIRED (OAuth 2.0 RECOMMENDED; HTTP Basic MAY be
   accepted as an alternative using the user’s current credentials).

   Request JSON:
   {
     "current_password": "string",   // REQUIRED if not using Basic
     "new_password":     "string",   // REQUIRED
     "user_id":          "string"    // OPTIONAL (if applicable)
   }

   Responses:
     200 OK
       {
         "success": true,
         "message": "Password changed successfully",
         "suggested_next_password_rotation_days": 90
       }
     400 Bad Request on policy violation (use Error Model).
     401 Unauthorized on auth failure.
     429 Too Many Requests when rate limited.

4.3.  POST /sapi-password/v1/out-of-band-initiate

   Purpose: Begin an OOB reset when current credentials are not
   available, or when policy requires OOB approval.

   Authentication: REQUIRED (the caller is a client acting for the user,
   or an admin with appropriate scope).

   Request JSON:
   {
     "username": "user@example.com",     // REQUIRED (or other unique ID)
     "channel":  "email",                // OPTIONAL (server chooses if absent)
     "locale":   "en-US",                // OPTIONAL
     "challenge": "opaque-string"        // OPTIONAL, client-proposed temporary
   }

   Challenge Semantics:
     - If "challenge" is omitted, the server MUST generate a secure
       challenge/token and deliver it via the selected OOB channel.
     - If provided, the server MUST NOT activate it until OOB verification
       is completed.

   Response:
     200 OK
     {
       "id": "oob-process-id",
       "valid_until": "2025-09-14T10:00:00Z",
       "update_interval_seconds": 900,
       "delivery": { "channel": "email" }   // OPTIONAL metadata
     }

   Errors:
     401 Unauthorized
     404 Not Found (username not recognized) — OPTIONAL: servers MAY
         return 200 with a generic body to avoid enumeration (see Privacy).
     429 Too Many Requests

4.4.  GET /sapi-password/v1/out-of-band-status

   Purpose: Poll the OOB process status.

   Authentication: REQUIRED.

   Query:
     ?id=oob-process-id

   Response:
     200 OK
     {
       "status": "pending" | "completed" | "rejected" | "unknown_id",
       "next_check_seconds": 900
     }

   Errors:
     401 Unauthorized
     404 Not Found (if process is unknown and enumeration is permitted)

4.5.  POST /sapi-password/v1/out-of-band-complete

   Purpose: Finalize the OOB reset by setting the new password once
   verification is complete.

   Authentication: REQUIRED.

   Request JSON:
   {
     "id": "oob-process-id",              // REQUIRED
     "challenge": "opaque-string",        // REQUIRED (server- or client-generated)
     "new_password": "string",            // REQUIRED
     "additional_confirmation": "string"  // OPTIONAL (e.g., emailed/SMS code)
   }

   Processing:
     - If the OOB process "id" is in state "completed" and "challenge"
       matches the expected value, the server MUST apply policy checks
       and, if satisfied, set the new password.
     - If an additional confirmation code is required and missing or
       incorrect, the server MUST return an error indicating that
       additional confirmation is required (see Error Model).
     - Failed confirmation attempts SHOULD be limited (see policy).

   Responses:
     200 OK
     {
       "success": true,
       "message": "Password changed successfully"
     }

     400 Bad Request (policy violation; malformed input)
     401 Unauthorized
     404 Not Found (unknown process id if enumeration is permitted)
     409 Conflict (OOB state not completed)
     429 Too Many Requests

5.  Flows (Non-Normative Examples)

5.1.  Logged-In Password Change

   1) Client calls GET /compliance to learn policy (optional).
   2) Client calls POST /change with current_password and new_password.
   3) Server validates and rotates the password.

5.2.  Out-of-Band Reset (Email/SMS)

   1) Client calls POST /out-of-band-initiate with username and channel "email".
   2) Server generates an OOB code and emails it to the registered address.
   3) Client polls status until "completed" or proceeds to completion with
      the code if required by policy.
   4) Client calls POST /out-of-band-complete with id, challenge (code),
      new_password, and additional_confirmation if needed.

5.3.  Out-of-Band Reset (Postal/Manual Approval)

   1) Client calls POST /out-of-band-initiate with channel "postal".
      Server mails a code to the address on file; valid_until may be days.
      The policy’s `channel_instructions["postal"]` explains required
      documents and expected timelines.
   2) Client polls status periodically (e.g., update_interval_seconds).
      An administrator MAY mark the process “completed” after in-person
      proofing; the policy’s `channel_instructions["admin"]` page explains
      scheduling and requirements.
   3) Client calls /out-of-band-complete with id, challenge, new_password.

6.  Security Considerations

   - Transport: All endpoints MUST require HTTPS. HTTP requests MUST be
     rejected (e.g., 403 Forbidden or 400 with no sensitive detail).
   - Authentication: OAuth 2.0 bearer tokens with narrowly scoped
     permissions are RECOMMENDED. HTTP Basic MAY be supported for
     /change to enable legacy and password-manager use cases; servers
     MUST rate limit and monitor Basic usage.
   - Rate Limiting: Servers SHOULD implement per-account and per-IP
     throttling. After a configurable number of failures, servers MAY
     require additional verification or temporary lockout.
   - OOB Secrets: Challenges and additional_confirmation values MUST be
     generated with cryptographic randomness, stored securely, and
     invalidated promptly after use or expiration.
   - Enumeration Resistance: Servers SHOULD avoid revealing whether a
     username exists. For /out-of-band-initiate, returning a generic
     200 response without confirming existence is RECOMMENDED in
     consumer-facing deployments, subject to policy and usability.
   - Instructions URLs: `channel_instructions` URLs MUST be HTTPS, MUST
     NOT include PII or secret tokens, and SHOULD avoid leaking whether
     a specific username exists. Pages SHOULD be broadly applicable
     process guidance, not user-specific details.
   - Logging: Sensitive values (passwords, challenges, codes) MUST NOT
     be logged. Audit logs SHOULD record high-level events and metadata
     (timestamps, requesting client, channel) without secrets.
   - Policy Checks: Servers MUST enforce stated complexity and reuse
     policies uniformly across /change and /out-of-band-complete.
   - Admin Operations: If administrative initiation or approval is
     supported, it MUST require elevated scopes/roles and be auditable.

7.  Privacy Considerations

   - Data Minimization: Collect only identifiers necessary to perform
     the reset/change. Do not expose contact details in responses.
   - Communications: OOB messages SHOULD be sent only to verified
     contacts on file. Avoid disclosing sensitive account status in
     OOB messages.
   - Localization: Where locale is supplied, only use it to improve user
     comprehension of OOB communications and instructions pages.
   - Retention: Retain OOB process artifacts only as long as necessary
     for completion and audit per applicable policy/regulation.
   - Instructions Pages: SHOULD describe process steps, timelines, and
     required documents without exposing user-specific data.

8.  IANA Considerations

   This document requests registration of the following Well-Known URI
   (per RFC 8615):

     URI Suffix: sapi-password
     Change Controller: IETF
     Specification Document: This document

   No new media types or registries are defined by this document.

9.  References

9.1.  Normative References

   RFC 2119  Bradner, S., “Key words for use in RFCs to Indicate
             Requirement Levels”, BCP 14.

   RFC 8174  Leiba, B., “Ambiguity of Uppercase vs Lowercase in RFC 2119
             Key Words”, BCP 14.

   RFC 6749  Hardt, D., “The OAuth 2.0 Authorization Framework”.

   RFC 7617  Reschke, J., “The 'Basic' HTTP Authentication Scheme”.

   RFC 8615  Nottingham, M., “Well-Known Uniform Resource Identifiers
             (URIs)”.

9.2.  Informative References

   RFC 3062  Zeilenga, K., “LDAP Password Modify Extended Operation”.

   RFC 7644  Hunt, P., et al., “System for Cross-domain Identity
             Management (SCIM): Protocol”.

   NIST SP 800-63A  “Digital Identity Guidelines: Enrollment and
             Identity Proofing”.

10.  Acknowledgments

   The author thanks the implementers and reviewers who provided feedback
   on discovery, error semantics, OOB clarity, instructions URLs, and
   privacy guidance.

11.  Author’s Address

   Jens Sabitzer
   Email: jens_sabitzer@hotmail.de
